/* Links da aula2 do curso
    CodePen:                https://codepen.io/luizomf/full/KKNwMeG
    Github:                 https://github.com/luizomf/landing-page-cursojs
    Background SVG:         https://www.svgbackgrounds.com/#confetti-doodles

    Validador HTML:         https://validator.w3.org/
    Validador HTML a11y:    https://achecker.achecks.ca/checker/index.php (a11z representa as onze letras que separam as letras a e y da palavra accessibility)
    Imagens png e svg:      https://undraw.co/
    Otimizador de SVG:      https://jakearchibald.github.io/svgomg/
    Unsplash Images:        https://source.unsplash.com/random/360x360 (como esse link não tem parâmetro, criamos um qualquer como ?r=1, ?r=2, etc para burlar o cache do navegador. Assim, vai carregar sempre uma imagem diferente
    Códigos HTML para símbolos: digitar no google 'html code heart', por exemplo, para obter o código de um coração: &#9829; 
    Código Botão Hamburger: pesquisa no google por 'three line html code'. Ou aqui tem o símbolo: ☰
    Códigos de outros símbolos: https://www.w3schools.com/charsets/ref_utf_dingbats.asp
    Netlify: https://www.netlify.com/
*/

/* planejamento em rem como unidade de medida. html setado para 62.5%
/************************************************************************************************************************************************************/

/* pegar uma fonte pelo Google Fonts: https://fonts.google.com/ (os comandos abaixo foram informado pelo site e copiados de lá)
*    paraH1: font-family: 'Montserrat', sans-serif; 
*    paraBody: font-family: 'Open Sans', sans-serif;
/************************************************************************************************************************************************************/

/* pegar imagens em SVG por SVG Backgrounds: https://www.svgbackgrounds.com/
*    criar uma class com a configuração de um background-image com a imagem, background-size e background-position, e depois, apenas aplica-la onde eu quiser
/************************************************************************************************************************************************************/

/* criação dos containers principais (a div que pega toda a página e a que centraliza mantendo margem lateral com a página, onde irá o conteúdo)
/************************************************************************************************************************************************************/

/* todas as sections terão no mínimo a altura da tela (min-height: 100vh;)
/************************************************************************************************************************************************************/

/* definição de uma variável para o gap principal de 3rem (30px) para aplicar em locais como um padding para o main-content, por exemplo
/************************************************************************************************************************************************************/

/* criação de um contador para criar os pseudo-elementos nos itens da class .grid com ::before
/************************************************************************************************************************************************************/

/* deploy da landing page na Netlify: https://www.netlify.com/
/************************************************************************************************************************************************************/

.intro-content {
    position: relative;
    /* top: -8rem; */
    display: grid;
    grid-template-columns: 1fr 1.5fr;
    gap: var(--gap);
    min-height: 100vh;
}
.intro-text-content, .intro-img {
    display: flex;
    flex-flow: column wrap;
    justify-content: center;
}
.intro-img img,
.intro-img svg {
    max-width: 100%;
    height: auto;
}
.top3-content {
    max-width: 64rem;
    display: flex;
    /* flex-flow: column wrap; */
    flex-direction: column;
    flex-wrap: nowrap;
    justify-content: center;
    min-height: 100vh;
    text-align: center;
}
.grid-one-content {
    display: flex;
    flex-flow: column wrap;
    justify-content: center;
    min-height: 100vh;
}
.grid-main-heading {
    margin-bottom: 1rem;
}
.grid-description {
    padding-bottom: 5rem;
}
.grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--gap);
    counter-reset: grid-counter;
}
.grid h3 {
    font-size: 3rem;
    position: relative;
    padding-left: 5rem;
    padding-bottom: 2rem;
}
.grid h3::before {
    counter-increment: grid-counter;
    content: counter(grid-counter);
    position: absolute;
    font-size: 8rem;
    font-style: italic;
    top: -4rem;
    left: -2rem;
    transform: rotate(5deg);
}
.gallery-img {
    width: 100%;
    max-width: 36rem;
    max-height: 36rem;
    overflow: hidden;
}
.gallery-img img {
    transition: all 300ms ease-in-out;
}
.gallery-img img:hover {
    transform: translate(-3%, 3%) scale(1.2) rotate(5deg);
}
.contact-form {
    grid-column: span 2;
}
.contact-form .form-grid {
    border: none;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: var(--gap);
}
.form-grid legend {
    font-style: italic;
    font-size: 1.6rem;
    margin-bottom: 3rem;
}
.form-group {
    flex: 1 1 320px;
}
.form-group label {
    display: block;
    margin-bottom: 1rem;
}
.form-group input,
.form-group textarea {
    border: none;
    background: var(--white-color);
    padding: 1.5rem 2rem;
    width: 100%;
    font-size: 3rem;
    outline: none;
}
.form-group input:focus,
.form-group textarea:focus {
    box-shadow: 0 0 1rem 0.2rem var(--secondary-color);
}
.form-group button {
    border: 0.5rem solid var(--white-color);
    background: none;
    color: var(--white-color);
    padding: 1.5rem 2rem;
    font-size: 3rem;
    cursor: pointer;
    transition: all 300ms ease-in-out;
}
.form-group button:hover {
    background: var(--white-color);
    color: var(--primary-color);
}
.form-group ::placeholder { /* separado mesmo, pois form-group neste caso, é uma div. Se fosse o próprio input, poderia ser: input::placeholder, junto. */
    color: var(--light-gray-color);
}
.footer {
    text-align: center;
    font-size: 1.6rem;
}
.footer a {
    color: var(--primary-color);
}
.heart {
    color: var(--secondary-color);
}
.footer p {
    margin: 0;
    padding: 3rem;
}
.close-menu {
    display: none;
}
.back-to-top {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: var(--white-color);
    width: 5rem;
    height: 5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    cursor: pointer;
    color: var(--primary-color);
    transform: rotate(-90deg);
    border: 0.1rem solid var(--primary-color);
}



@media (max-width: 800px) {
    .intro-content, .grid {
        grid-template-columns: 1fr;
    }
    .gallery-img {
        width: 100%;
        max-width: 100%;
        max-height: 100%;
    }
    .gallery-img img {
        width: 100%;
    }
    .grid-one-content {
        display: block;
    }
    .menu {
        bottom: 0;
        text-align: center;
        display: none;
    }
    .menu-content, .menu-content ul {
        flex-direction: column;
        justify-content: center;
    }
    .menu-content {
        height: 100vh;
    }
    .close-menu-label::after {
        content: '☰';
        position: fixed;
        z-index: 2;
        top: 2rem;
        right: 2rem;
        background: var(--primary-color);
        color: var(--white-color);
        font-size: 3rem;
        line-height: 3rem;
        width: 3rem;
        height: 3rem;
        text-align: center;
        padding: 0.5rem;
        cursor: pointer;
    }
    .close-menu:checked~.menu {
        display: block;
    }
    .close-menu:checked~.close-menu-label::after {
        content:'x';
    }
    .menu-spacing {
        display: none;
    }


}
